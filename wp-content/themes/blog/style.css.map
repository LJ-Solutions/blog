{"version":3,"sources":["variables/_breakpoints.scss","variables/_colors.scss","abstractions/_mixins.scss","base/_footer.scss","../node_modules/compass-mixins/lib/compass/css3/_inline-block.scss","../node_modules/compass-mixins/lib/compass/css3/_shared.scss","../node_modules/compass-mixins/lib/compass/css3/_background-clip.scss","../node_modules/compass-mixins/lib/compass/css3/_transition.scss","../node_modules/compass-mixins/lib/compass/css3/_text-shadow.scss","base/_global.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../node_modules/compass-mixins/lib/compass/typography/_vertical_rhythm.scss","../node_modules/susy/sass/susy/output/support/_rem.scss","../node_modules/susy/sass/susy/language/susy/_container.scss","../node_modules/susy/sass/susy/output/support/_clearfix.scss","../node_modules/susy/sass/susy/language/susy/_span.scss","base/_header.scss","base/_reset.scss"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["/*\nTo change this license header, choose License Headers in Project Properties.\nTo change this template file, choose Tools | Templates\nand open the template in the editor.\n*/\n/* \n    Created on : Aug 25, 2016, 10:30:50 AM\n    Author     : ronald\n*/\n$mobile: 300px 480px;\n$middle-portrait: 481px 620px;\n$portrait: 621px 768px;\n$landscape: 769px 1024px; \n$small-monitors: 1025px 1220px;\n$large-monitors: 1221px;\n","/*\n  To change this license header, choose License Headers in Project Properties.\n  To change this template file, choose Tools | Templates\n  and open the template in the editor.\n*/\n/* \n  Created on : Jul 13, 2016, 11:50:23 AM\n  Author     : ronalds\n*/\n$moderate-green: #71b439; \n$white: #fff;\n$mostly-black: #151515;\n$mostly-black-light: #2e2e2e\n  ","/*\nTo change this license header, choose License Headers in Project Properties.\nTo change this template file, choose Tools | Templates\nand open the template in the editor.\n*/\n/* \n    Created on : Aug 25, 2016, 10:56:52 AM\n    Author     : ronald\n*/\n/*\n    Set animation properties\n    @include animation(10s, 5s, changecolour)\n */\n@mixin animation($delay, $count, $duration, $animation) {\n  -webkit-animation-delay: $delay;\n  -webkit-animation-duration: $duration;\n  -webkit-animation-name: $animation;\n  -webkit-animation-iteration-count: $count;\n  -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */\n\n  -moz-animation-delay: $delay;\n  -moz-animation-duration: $duration;\n  -moz-animation-name: $animation;\n  -moz-animation-iteration-count: $count;\n  -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */\n\n  -o-animation-delay: $delay;\n  -o-animation-duration: $duration;\n  -o-animation-name: $animation;\n  -o-animation-iteration-count: $count;\n  -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */\n\n  animation-delay: $delay;\n  animation-duration: $duration;\n  animation-name: $animation;\n  animation-iteration-count: $count;\n  animation-fill-mode: forwards; /* this prevents the animation from restarting! */\n}\n/* Set font properties */\n@mixin font-properties($family, $color: $text-mirage-dark-color, $weight: 400, $style: normal, $letter-spacing: 0) {\n  font-family: $family;\n  font-weight: $weight;\n  font-style: $style;\n  color: $color;\n  @include letter-spacing($letter-spacing);\n}\n/* Letter spacing calculate to em */\n@mixin letter-spacing($value) {\n  letter-spacing: $value/1000 + em;\n}\n\n/* Line height*/\n @function line-height-calculation($font-size, $leading) {\n  @if $leading == 0 {\n    @return ( $font-size * 1.2 ) / ($base-line-height);\n  } \n  @else {\n    @return $leading / $base-line-height;\n  }\n}\n/* Calculate font size depending of screen size */\n@mixin font-size($font-mobile, $font-middle-portrait, $font-portrait, $font-landscape, $font-small-monitors, $font-large-monitors, $leading: 0) {\n  @include breakpoint($mobile) {\n    @include adjust-font-size-to($font-mobile, line-height-calculation($font-mobile, $leading));\n  }\n  \n  @include breakpoint($middle-portrait) {\n    @include adjust-font-size-to($font-middle-portrait, line-height-calculation($font-middle-portrait, $leading));\n  }\n  \n  @include breakpoint($portrait) {\n    @include adjust-font-size-to($font-portrait, line-height-calculation($font-portrait, $leading));\n  }\n  \n  @include breakpoint($landscape) {\n    @include adjust-font-size-to($font-landscape, line-height-calculation($font-landscape, $leading));\n  }\n  \n  @include breakpoint($small-monitors) {\n    @include adjust-font-size-to($font-small-monitors, line-height-calculation($font-small-monitors, $leading));\n  }\n  \n  @include breakpoint($large-monitors) {\n    @include adjust-font-size-to($font-large-monitors, line-height-calculation($font-large-monitors, $leading));\n  }\n}\n\n/* Compatible all browsers */\n@mixin browsers($option, $value) {\n  -webkit-#{$option}:$value;\n  -khtml-#{$option}:$value;\n  -moz-#{$option}:$value;\n  -ms-#{$option}:$value;\n  -o-#{$option}:$value;\n  #{$option}:$value;\n}\n","footer {\n  background: $mostly-black-light;\n  color: $white;\n}\n.social {\n  text-align: center;\n  background-color: $mostly-black-light;\n  padding: 45px;\n}\n.social {\n  .link {\n    @include inline-block;\n    vertical-align: middle;\n    position: relative;\n    width: 150px;\n    height: 150px;\n    background-color: $moderate-green;\n    @include border-radius(50%);\n    border : 2px dashed $white;\n    @include background-clip(content-box);\n    padding: 10px;\n    @include transition(.5s);\n    color: $white;\n    margin-left: 15px;\n    margin-right: 15px;\n    @include text-shadow(0 -1px 0 rgba(0, 0, 0, 0.2), 0 1px 0 rgba(255, 255, 255, 0.2));\n    font-size: 70px;\n    &:hover {\n      padding: 20px;\n      color: $white;\n      margin-left: -5px;\n      @include transform(translateX(10px) rotate(360deg));\n    }  \n  }\n}\n.social .link span {\n  display: block;\n  position: absolute;\n  text-align: center;\n  top: 50%;\n  left: 50%;\n  @include transform(translate(-50%, -50%));\n}\n.site-footer {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  color: $white;\n  background: $mostly-black-light;\n}","@import \"shared\";\n\n// Set `$inline-block-alignment` to `none` or `false` to disable the output\n// of a vertical-align property in the inline-block mixin.\n// Or set it to a legal value for `vertical-align` to change the default.\n$inline-block-alignment: middle !default;\n\n// Provides a cross-browser method to implement `display: inline-block;`\n@mixin inline-block($alignment: $inline-block-alignment) {\n  @if $legacy-support-for-mozilla {\n    display: -moz-inline-stack;\n  }\n  display: inline-block;\n  @if $alignment and $alignment != none {\n    vertical-align: $alignment;\n  }\n  @if $legacy-support-for-ie {\n    *vertical-align: auto;\n    zoom: 1;\n    *display: inline;\n  }\n}\n","@import \"../support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\n  @if $official                                        {         #{$property} : $value; }\n}\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\n  @if $official                                        { #{$property} :         #{$value}; }\n}\n","@import \"shared\";\n\n// The default value is `padding-box` -- the box model used by modern browsers.\n//\n// If you wish to do so, you can override the default constant with `border-box`\n//\n// To override to the default border-box model, use this code:\n//     $default-background-clip: border-box\n\n$default-background-clip: padding-box !default;\n\n// Clip the background (image and color) at the edge of the padding or border.\n//\n// Legal Values:\n//\n//   * padding-box\n//   * border-box\n//   * text\n\n@mixin background-clip($clip: $default-background-clip) {\n  // webkit and mozilla use the deprecated short [border | padding]\n  $clip: unquote($clip);\n  $deprecated: $clip;\n  @if $clip == padding-box { $deprecated: padding; }\n  @if $clip == border-box { $deprecated: border; }\n  // Support for webkit and mozilla's use of the deprecated short form\n  @include experimental(background-clip, $deprecated,\n    -moz,\n    -webkit,\n    not(-o),\n    not(-ms),\n    not(-khtml),\n    not official\n  );\n  @include experimental(background-clip, $clip,\n    not(-moz),\n    not(-webkit),\n    not(-o),\n    not(-ms),\n    -khtml,\n    official\n  );\n}\n","@import \"shared\";\n\n// CSS Transitions\n// Currently only works in Webkit.\n//\n// * expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3\n// * We'll be prepared.\n//\n// Including this submodule sets following defaults for the mixins:\n//\n//     $default-transition-property : all\n//     $default-transition-duration : 1s\n//     $default-transition-function : false\n//     $default-transition-delay    : false\n//\n// Override them if you like. Timing-function and delay are set to false for browser defaults (ease, 0s).\n\n$default-transition-property: all !default;\n\n$default-transition-duration: 1s !default;\n\n$default-transition-function: false !default;\n\n$default-transition-delay: false !default;\n\n$transitionable-prefixed-values: transform, transform-origin !default;\n\n// One or more properties to transition\n//\n// * for multiple, use a comma-delimited list\n// * also accepts \"all\" or \"none\"\n\n@mixin transition-property($property-1: $default-transition-property,\n  $property-2 : false,\n  $property-3 : false,\n  $property-4 : false,\n  $property-5 : false,\n  $property-6 : false,\n  $property-7 : false,\n  $property-8 : false,\n  $property-9 : false,\n  $property-10: false\n) {\n  @if type-of($property-1) == string { $property-1: unquote($property-1); }\n  $properties: compact($property-1, $property-2, $property-3, $property-4, $property-5, $property-6, $property-7, $property-8, $property-9, $property-10);\n  @if $experimental-support-for-webkit    {       -webkit-transition-property : prefixed-for-transition(-webkit, $properties); }\n  @if $experimental-support-for-mozilla   {          -moz-transition-property : prefixed-for-transition(-moz,    $properties); }\n  @if $experimental-support-for-opera     {            -o-transition-property : prefixed-for-transition(-o,      $properties); }\n                                                          transition-property : $properties;\n}\n\n// One or more durations in seconds\n//\n// * for multiple, use a comma-delimited list\n// * these durations will affect the properties in the same list position\n\n@mixin transition-duration($duration-1: $default-transition-duration,\n  $duration-2 : false,\n  $duration-3 : false,\n  $duration-4 : false,\n  $duration-5 : false,\n  $duration-6 : false,\n  $duration-7 : false,\n  $duration-8 : false,\n  $duration-9 : false,\n  $duration-10: false\n) {\n  @if type-of($duration-1) == string { $duration-1: unquote($duration-1); }\n  $durations: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10);\n  @include experimental(transition-duration, $durations,\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\n  );\n}\n\n// One or more timing functions\n//\n// * [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]\n// * For multiple, use a comma-delimited list\n// * These functions will effect the properties in the same list position\n\n@mixin transition-timing-function($function-1: $default-transition-function,\n  $function-2 : false,\n  $function-3 : false,\n  $function-4 : false,\n  $function-5 : false,\n  $function-6 : false,\n  $function-7 : false,\n  $function-8 : false,\n  $function-9 : false,\n  $function-10: false\n) {\n  $function-1: unquote($function-1);\n  $functions: compact($function-1, $function-2, $function-3, $function-4, $function-5, $function-6, $function-7, $function-8, $function-9, $function-10);\n  @include experimental(transition-timing-function, $functions,\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\n  );\n}\n\n// One or more transition-delays in seconds\n//\n// * for multiple, use a comma-delimited list\n// * these delays will effect the properties in the same list position\n\n@mixin transition-delay($delay-1: $default-transition-delay,\n  $delay-2 : false,\n  $delay-3 : false,\n  $delay-4 : false,\n  $delay-5 : false,\n  $delay-6 : false,\n  $delay-7 : false,\n  $delay-8 : false,\n  $delay-9 : false,\n  $delay-10: false\n) {\n  @if type-of($delay-1) == string { $delay-1: unquote($delay-1); }\n  $delays: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10);\n  @include experimental(transition-delay, $delays,\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\n  );\n}\n\n// Transition all-in-one shorthand\n\n@mixin single-transition(\n  $property: $default-transition-property,\n  $duration: $default-transition-duration,\n  $function: $default-transition-function,\n  $delay: $default-transition-delay\n) {\n  @include transition(compact($property $duration $function $delay));\n}\n\n@mixin transition(\n  $transition-1 : default,\n  $transition-2 : false,\n  $transition-3 : false,\n  $transition-4 : false,\n  $transition-5 : false,\n  $transition-6 : false,\n  $transition-7 : false,\n  $transition-8 : false,\n  $transition-9 : false,\n  $transition-10: false\n) {\n  @if $transition-1 == default {\n    $transition-1 : compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay);\n  }\n  $transitions: false;\n  @if type-of($transition-1) == list and type-of(nth($transition-1,1)) == list {\n    $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);\n  } @else {\n    $transitions : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);\n  }\n  $delays: comma-list();\n  $has-delays: false;\n  $webkit-value: comma-list();\n  $moz-value: comma-list();\n  $o-value: comma-list();\n\n  // This block can be made considerably simpler at the point in time that\n  // we no longer need to deal with the differences in how delays are treated.\n  @each $transition in $transitions {\n    // Extract the values from the list\n    // (this would be cleaner if nth took a 3rd argument to provide a default value).\n    $property: nth($transition, 1);\n    $duration: false;\n    $timing-function: false;\n    $delay: false;\n    @if length($transition) > 1 { $duration:        nth($transition, 2); }\n    @if length($transition) > 2 { $timing-function: nth($transition, 3); }\n    @if length($transition) > 3 { $delay:           nth($transition, 4); $has-delays: true; }\n\n    // If a delay is provided without a timing function\n    @if is-time($timing-function) and not($delay) { $delay: $timing-function; $timing-function: false; $has-delays: true; }\n\n    // Keep a list of delays in case one is specified\n    $delays: append($delays, if($delay, $delay, 0s));\n\n    $webkit-value: append($webkit-value, compact((prefixed-for-transition(-webkit, $property) $duration $timing-function)...));\n       $moz-value: append(   $moz-value, compact((prefixed-for-transition(   -moz, $property) $duration $timing-function $delay)...));\n         $o-value: append(     $o-value, compact((prefixed-for-transition(     -o, $property) $duration $timing-function $delay)...));\n  }\n\n  @if $experimental-support-for-webkit    {       -webkit-transition : $webkit-value;\n    // old webkit doesn't support the delay parameter in the shorthand so we progressively enhance it.\n    @if $has-delays                       { -webkit-transition-delay : $delays;       } }\n  @if $experimental-support-for-mozilla   {          -moz-transition : $moz-value;    }\n  @if $experimental-support-for-opera     {            -o-transition : $o-value;      }\n                                                          transition : $transitions;\n}\n\n// coerce a list to be comma delimited or make a new, empty comma delimited list.\n@function comma-list($list: ()) {\n  @return join((), $list, comma);\n}\n\n// Returns `$property` with the given prefix if it is found in `$transitionable-prefixed-values`.\n@function prefixed-for-transition($prefix, $property) {\n  @if type-of($property) == list {\n    $new-list: comma-list();\n    @each $v in $property {\n      $new-list: append($new-list, prefixed-for-transition($prefix, $v));\n    }\n    @return $new-list;\n  } @else {\n    @if index($transitionable-prefixed-values, $property) {\n      @return #{$prefix}-#{$property};\n    } @else {\n      @return $property;\n    }\n  }\n}\n\n// Checks if the value given is a unit of time.\n@function is-time($value) {\n  @if type-of($value) == number {\n    @return not(not(index(s ms, unit($value))));\n  } @else {\n    @return false;\n  }\n}\n","@import \"shared\";\n\n// These defaults make the arguments optional for this mixin\n// If you like, set different defaults in your project\n\n$default-text-shadow-color:    #aaa !default;\n$default-text-shadow-h-offset: 0px  !default;\n$default-text-shadow-v-offset: 0px  !default;\n$default-text-shadow-blur:     1px  !default;\n$default-text-shadow-spread:   false  !default;\n\n// Provides cross-browser text shadows when one or more shadows are needed.\n// Each shadow argument should adhere to the standard css3 syntax for the\n// text-shadow property.\n//\n// Note: if any shadow has a spread parameter, this will cause the mixin\n// to emit the shadow declaration twice, first without the spread,\n// then with the spread included. This allows you to progressively\n// enhance the browsers that do support the spread parameter.\n@mixin text-shadow(\n  $shadow-1 : default,\n  $shadow-2 : false,\n  $shadow-3 : false,\n  $shadow-4 : false,\n  $shadow-5 : false,\n  $shadow-6 : false,\n  $shadow-7 : false,\n  $shadow-8 : false,\n  $shadow-9 : false,\n  $shadow-10: false\n) {\n  @if $shadow-1 == default {\n    $shadow-1: compact($default-text-shadow-h-offset $default-text-shadow-v-offset $default-text-shadow-blur $default-text-shadow-spread $default-text-shadow-color);\n  }\n  $shadows-without-spread: join((),(),comma);\n  $shadows: join((),(),comma);\n  $has-spread: false;\n  @each $shadow in compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5,\n                           $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10) {\n    @if length($shadow) > 4 {\n      $has-spread: true;\n      $shadows-without-spread: append($shadows-without-spread, nth($shadow,1) nth($shadow,2) nth($shadow,3) nth($shadow,5));\n      $shadows: append($shadows, $shadow);\n    } else {\n      $shadows-without-spread: append($shadows-without-spread, $shadow);\n      $shadows: append($shadows, $shadow);\n    }\n  }\n  @if $has-spread {\n    text-shadow: $shadows-without-spread;\n  }\n  text-shadow: $shadows;\n}\n\n// Provides a single cross-browser CSS text shadow.\n//\n// Provides sensible defaults for the color, horizontal offset, vertical offset, blur, and spread\n// according to the configuration defaults above.\n@mixin single-text-shadow(\n  $hoff: false,\n  $voff: false,\n  $blur: false,\n  $spread: false,\n  $color: false\n) {\n  // A lot of people think the color comes first. It doesn't.\n  @if type-of($hoff) == color {\n    $temp-color: $hoff;\n    $hoff: $voff;\n    $voff: $blur;\n    $blur: $spread;\n    $spread: $color;\n    $color: $temp-color;\n  }\n  // Can't rely on default assignment with multiple supported argument orders.\n  $hoff:   if($hoff,   $hoff,   $default-text-shadow-h-offset);\n  $voff:   if($voff,   $voff,   $default-text-shadow-v-offset);\n  $blur:   if($blur,   $blur,   $default-text-shadow-blur    );\n  $spread: if($spread, $spread, $default-text-shadow-spread  );\n  $color:  if($color,  $color,  $default-text-shadow-color   );\n  // We don't need experimental support for this property.\n  @if $color == none or $hoff == none {\n    @include text-shadow(none);\n  } @else {\n    @include text-shadow(compact($hoff $voff $blur $spread $color));\n  }\n}\n","//\n// Global structure configurations\n//\n//.content {\n  //@include breakpoint(800px) {\n    //text-align: center;\n    //width: span(3);\n  //}\n//} \na {\n  color: $moderate-green;\n  @include transition(color 300ms, background-color  300ms);\n}\nbody {\n  @include font-properties(('Open Sans', sans-serif), $white, normal, normal, 0);\n  @include font-size(14px, 14px, 14px, 14px, 14px, 14px, 24px);\n  color: #333;\n  background-color: #fff;\n} \n.site-main {\n  @include container(1170px);\n  .content-left {\n    width: span(8);\n    float: left;\n    max-width: 100%;\n    padding-left: 30px;\n  }\n  .content-right {\n    width: span(4);\n    float: left;\n    max-width: 100%;\n    padding-left: 30px;\n  }\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","@import \"../layout/grid-background\";\n\n// The base font size.\n$base-font-size: 16px !default;\n\n// The base line height determines the basic unit of vertical rhythm.\n$base-line-height: 24px !default;\n\n// Set the default border style for rhythm borders.\n$default-rhythm-border-style: solid !default;\n\n// The default font size in all browsers.\n$browser-default-font-size: 16px;\n\n// Set to false if you want to use absolute pixels in sizing your typography.\n$relative-font-sizing: true !default;\n\n// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function\n// to round the line height to the nearest half line height instead of the\n// nearest integral line height to avoid large spacing between lines.\n$round-to-nearest-half-line: false !default;\n\n// Ensure there is at least this many pixels\n// of vertical padding above and below the text.\n$min-line-padding: 2px !default;\n\n// $base-font-size but in your output unit of choice.\n// Defaults to 1em when `$relative-font-sizing` is true.\n$font-unit: if($relative-font-sizing, 1em, $base-font-size) !default;\n\n// The basic unit of font rhythm.\n$base-rhythm-unit: $base-line-height / $base-font-size * $font-unit;\n\n// The leader is the amount of whitespace in a line.\n// It might be useful in your calculations.\n$base-leader: ($base-line-height - $base-font-size) * $font-unit / $base-font-size;\n\n// The half-leader is the amount of whitespace above and below a line.\n// It might be useful in your calculations.\n$base-half-leader: $base-leader / 2;\n\n// True if a number has a relative unit.\n@function relative-unit($number) {\n  @return unit($number) == \"%\" or unit($number) == \"em\" or unit($number) == \"rem\"\n}\n\n// True if a number has an absolute unit.\n@function absolute-unit($number) {\n  @return not(relative-unit($number) or unitless($number));\n}\n\n@if $relative-font-sizing and not(relative-unit($font-unit)) {\n  @warn \"$relative-font-sizing is true but $font-unit is set to #{$font-unit} which is not a relative unit.\";\n}\n\n// Establishes a font baseline for the given font-size.\n@mixin establish-baseline($font-size: $base-font-size) {\n  // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts\n  // whose root is set in ems. So we set the root font size in percentages of\n  // the default font size.\n  * html {\n    font-size: 100% * ($font-size / $browser-default-font-size);\n  }\n  html {\n    font-size: $font-size;\n    @include adjust-leading-to(1, if($relative-font-sizing, $font-size, $base-font-size));\n  }\n}\n\n// Resets the line-height to 1 vertical rhythm unit.\n// Does not work on elements whose font-size is different from $base-font-size.\n//\n// @deprecated This mixin will be removed in the next release.\n// Please use the `adjust-leading-to` mixin instead.\n@mixin reset-baseline {\n  @include adjust-leading-to(1, if($relative-font-sizing, $base-font-size, $base-font-size));\n}\n\n// Show a background image that can be used to debug your alignments.\n// Include the $img argument if you would rather use your own image than the\n// Compass default gradient image.\n@mixin debug-vertical-alignment($img: false) {\n  @if $img {\n    background: image-url($img);\n  } @else {\n    @include baseline-grid-background($base-rhythm-unit);\n  }\n}\n\n// Adjust a block to have a different font size and line height to maintain the\n// rhythm. $lines specifies how many multiples of the baseline rhythm each line\n// of this font should use up. It does not have to be an integer, but it\n// defaults to the smallest integer that is large enough to fit the font.\n// Use $from-size to adjust from a font-size other than the base font-size.\n@mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {\n  @if not($relative-font-sizing) and $from-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to\";\n  }\n  font-size: $font-unit * $to-size / $from-size;\n  @include adjust-leading-to($lines, if($relative-font-sizing, $to-size, $base-font-size));\n}\n\n// Adjust a block to have different line height to maintain the rhythm.\n// $lines specifies how many multiples of the baseline rhythm each line of this\n// font should use up. It does not have to be an integer, but it defaults to the\n// smallest integer that is large enough to fit the font.\n@mixin adjust-leading-to($lines, $font-size: $base-font-size) {\n  line-height: rhythm($lines, $font-size);\n}\n\n// Calculate rhythm units.\n@function rhythm(\n  $lines: 1,\n  $font-size: $base-font-size,\n  $offset: 0\n) {\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to the rhythm function\";\n  }\n  $rhythm: $font-unit * ($lines * $base-line-height - $offset) / $font-size;\n  // Round the pixels down to nearest integer.\n  @if unit($rhythm) == px {\n    $rhythm: floor($rhythm);\n  }\n  @return $rhythm;\n}\n\n// Calculate the minimum multiple of rhythm units needed to contain the font-size.\n@function lines-for-font-size($font-size) {\n  $lines: if($round-to-nearest-half-line,\n              ceil(2 * $font-size / $base-line-height) / 2,\n              ceil($font-size / $base-line-height));\n  @if $lines * $base-line-height - $font-size < $min-line-padding * 2 {\n    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);\n  }\n  @return $lines;\n}\n\n// Apply leading whitespace. The $property can be margin or padding.\n@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {\n  #{$property}-top: rhythm($lines, $font-size);\n}\n\n// Apply leading whitespace as padding.\n@mixin padding-leader($lines: 1, $font-size: $base-font-size) {\n  padding-top: rhythm($lines, $font-size);\n}\n\n// Apply leading whitespace as margin.\n@mixin margin-leader($lines: 1, $font-size: $base-font-size) {\n  margin-top: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace. The $property can be margin or padding.\n@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {\n  #{$property}-bottom: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace as padding.\n@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {\n  padding-bottom: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace as margin.\n@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {\n  margin-bottom: rhythm($lines, $font-size);\n}\n\n// Shorthand mixin to apply whitespace for top and bottom margins and padding.\n@mixin rhythm($leader: 0, $padding-leader: 0, $padding-trailer: 0, $trailer: 0, $font-size: $base-font-size) {\n  @include leader($leader, $font-size);\n  @include padding-leader($padding-leader, $font-size);\n  @include padding-trailer($padding-trailer, $font-size);\n  @include trailer($trailer, $font-size);\n}\n\n// Apply a border and whitespace to any side without destroying the vertical\n// rhythm. The whitespace must be greater than the width of the border.\n@mixin apply-side-rhythm-border($side, $width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to apply-side-rhythm-border\";\n  }\n  border-#{$side}-style: $border-style;\n  border-#{$side}-width: $font-unit * $width / $font-size;\n  padding-#{$side}: rhythm($lines, $font-size, $offset: $width);\n}\n\n// Apply borders and whitespace equally to all sides.\n@mixin rhythm-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to rhythm-borders\";\n  }\n  border: {\n    style: $border-style;\n    width: $font-unit * $width / $font-size;\n  };\n  padding: rhythm($lines, $font-size, $offset: $width);\n}\n\n// Apply a leading border.\n@mixin leading-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);\n}\n\n// Apply a trailing border.\n@mixin trailing-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);\n}\n\n// Apply both leading and trailing borders.\n@mixin horizontal-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include leading-border($width, $lines, $font-size, $border-style);\n  @include trailing-border($width, $lines, $font-size, $border-style);\n}\n\n// Alias for `horizontal-borders` mixin.\n@mixin h-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include horizontal-borders($width, $lines, $font-size, $border-style);\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","\n.navbar-inverse {\n  border: none;\n}\n.navbar {\n  border-radius: 0;\n  margin-bottom: 0;\n  background: $mostly-black !important;\n  padding: 15px 0;\n  padding-bottom: 0;\n}\n.navbar-toggle {\n  margin-bottom: 23px !important;\n}\n.navbar-inverse {\n  .navbar-brand {\n    font-size: 36px;\n    color: $white;\n  }\n}\n.navbar {\n  &>.container {\n    .navbar-brand {\n      margin-left: 0;\n    }\n  }\n}\n.navbar-brand {\n  padding: 0;\n  margin: 0;\n}\n\n.navbar-inverse{\n  .navbar-brand {\n    font-size: 36px;\n    @include font-size(36px, 36px, 36px, 36px, 36px, 36px, 46px);\n    @include font-properties(\"code\", $white, normal, normal, 0);\n  }\n}\n.content-logo {\n  width: 186px;\n  display: inline-block;\n}\n.logos-bold {\n  @include font-properties(\"code\", $moderate-green, 400, normal, 0);\n}\n\n.logos-light {\n  @include font-properties(\"code\", $white, normal, normal, 0);\n}\n.navbar-inverse {\n  .navbar-nav {  \n    > li {\n      > a {\n        padding: 5px 12px;\n        margin: 0;\n        border-radius: 3px;\n        display: inline-block;\n        @include font-properties(\"code\", $white, normal, normal, 0);\n        @include font-size(14px, 14px, 14px, 14px, 14px, 14px, 24px);\n      }\n    }\n  }\n}\n","// http://meyerweb.com/eric/tools/css/reset/\n// v2.0 | 20110126\n\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address,\nbig, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center,\ndl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article,\naside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol, ul {\n  list-style: none;\n}\n\nblockquote, q {\n  quotes: none;\n}\n\nblockquote {\n  &::before, &::after {\n    content: '';\n    content: none;\n  }\n}\n\nq {\n  &::before, &::after {\n    content: '';\n    content: none;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}"],"sourceRoot":"/source/"}